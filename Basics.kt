/**
 * üìå Kotlin Basics: –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —è–∑—ã–∫–∞ Kotlin.
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main(), —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã.
 */

fun main() {
    // 1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    variablesDemo()

    // 2. –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    conditionsDemo()

    // 3. –¶–∏–∫–ª—ã
    loopsDemo()

    // 4. –§—É–Ω–∫—Ü–∏–∏
    functionsDemo()

    // 5. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    stringsDemo()
}

// ========================
// 1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
// ========================
fun variablesDemo() {
    println("=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ===")

    // –ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–∞–Ω–∞–ª–æ–≥ final –≤ Java)
    val name: String = "Alice"
    // name = "Bob"  // –û—à–∏–±–∫–∞: val –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å

    // –ò–∑–º–µ–Ω—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    var age: Int = 25
    age = 26  // OK

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
    val isStudent = true  // Boolean
    val height = 1.75     // Double

    // –ß–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
    val byte: Byte = 127
    val longNumber = 100L  // Long

    println("""
        name: $name
        age: $age
        isStudent: $isStudent
        height: $height
        byte: $byte
        longNumber: $longNumber
    """.trimIndent())
}

// ========================
// 2. –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
// ========================
fun conditionsDemo() {
    println("\n=== –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã ===")

    val x = 10

    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π if-else
    if (x > 5) {
        println("x –±–æ–ª—å—à–µ 5")
    } else {
        println("x –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5")
    }

    // Kotlin-—Å—Ç–∏–ª—å (if –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
    val result = if (x % 2 == 0) "—á—ë—Ç–Ω–æ–µ" else "–Ω–µ—á—ë—Ç–Ω–æ–µ"
    println("x ‚Äî $result —á–∏—Å–ª–æ")

    // When (–∞–Ω–∞–ª–æ–≥ switch)
    when (x) {
        10 -> println("–≠—Ç–æ –¥–µ—Å—è—Ç—å")
        in 1..9 -> println("–ú–µ–∂–¥—É 1 –∏ 9")
        else -> println("–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ")
    }
}

// ========================
// 3. –¶–∏–∫–ª—ã
// ========================
fun loopsDemo() {
    println("\n=== –¶–∏–∫–ª—ã ===")

    // –¶–∏–∫–ª for
    println("–¶–∏–∫–ª for:")
    for (i in 1..5) {
        print("$i ")  // 1 2 3 4 5
    }
    println()

    // –¶–∏–∫–ª while
    println("–¶–∏–∫–ª while:")
    var j = 3
    while (j > 0) {
        print("$j ")  // 3 2 1
        j--
    }
    println()

    // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É
    val fruits = listOf("Apple", "Banana", "Orange")
    println("–§—Ä—É–∫—Ç—ã:")
    for (fruit in fruits) {
        print("$fruit ")  // Apple Banana Orange
    }
    println()
}

// ========================
// 4. –§—É–Ω–∫—Ü–∏–∏
// ========================
fun functionsDemo() {
    println("\n=== –§—É–Ω–∫—Ü–∏–∏ ===")

    // –§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    fun square(x: Int): Int {
        return x * x
    }
    println("–ö–≤–∞–¥—Ä–∞—Ç 5: ${square(5)}")  // 25

    // –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    fun isEven(num: Int) = num % 2 == 0
    println("–ß—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ 4? ${isEven(4)}")  // true

    // –§—É–Ω–∫—Ü–∏—è —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fun greet(name: String = "Guest") = "Hello, $name!"
    println(greet())      // Hello, Guest!
    println(greet("Bob")) // Hello, Bob!
}

// ========================
// 5. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
// ========================
fun stringsDemo() {
    println("\n=== –°—Ç—Ä–æ–∫–∏ ===")

    val str = "Kotlin"

    // –®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    println("–î–ª–∏–Ω–∞ '$str': ${str.length}")  // –î–ª–∏–Ω–∞ 'Kotlin': 6

    // –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    val multiline = """
        –≠—Ç–æ
        –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è
        —Å—Ç—Ä–æ–∫–∞
    """.trimIndent()
    println(multiline)
}